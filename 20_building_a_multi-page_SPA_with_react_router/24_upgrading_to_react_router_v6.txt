** UPGRADING TO REACT ROUTER V6

   ** Upgrade all <Switch> elements to <Routes>
        - React Router v6 introduces a Routes component that is kind of like Switch, 
        but a lot more powerful. The main advantages of Routes over Switch are:

            - All <Route>s and <Link>s inside a <Routes> are relative. This leads to 
            leaner and more predictable code in <Route path> and <Link to>

            - Routes are chosen based on the best match instead of being traversed in 
            order. This avoids bugs due to unreachable routes because they were defined 
            later in your <Switch>

            - Routes may be nested in one place instead of being spread out in different 
            components. In small to medium sized apps, this lets you easily see all your 
            routes at once. In large apps, you can still nest routes in bundles that you 
            load dynamically via React.lazy

            - In order to use v6, you'll need to convert all your <Switch> elements to 
            <Routes>. If you already made the upgrade to v5.1, you're halfway there.


    ** Relative Routes and Links
        - In v5, you had to be very explicit about how you wanted to nest your routes
        and links. In both cases, if you wanted nested routes and links you had to build 
        the <Route path> and <Link to> props from the parent route's match.url and 
        match.path properties. Additionally, if you wanted to nest routes, you had to 
        put them in the child route's component.

                // This is a React Router v5 app
                import {
                BrowserRouter,
                Switch,
                Route,
                Link,
                useRouteMatch
                } from "react-router-dom";

                function App() {
                return (
                    <BrowserRouter>
                    <Switch>
                        <Route exact path="/">
                        <Home />
                        </Route>
                        <Route path="/users">
                        <Users />
                        </Route>
                    </Switch>
                    </BrowserRouter>
                );
                }

                function Users() {
                // In v5, nested routes are rendered by the child component, so
                // you have <Switch> elements all over your app for nested UI.
                // You build nested routes and links using match.url and match.path.
                let match = useRouteMatch();

                return (
                    <div>
                    <nav>
                        <Link to={`${match.url}/me`}>My Profile</Link>
                    </nav>

                    <Switch>
                        <Route path={`${match.path}/me`}>
                        <OwnUserProfile />
                        </Route>
                        <Route path={`${match.path}/:id`}>
                        <UserProfile />
                        </Route>
                    </Switch>
                    </div>
                );
                }

        This is the same app in v6:

                // This is a React Router v6 app
                import {
                BrowserRouter,
                Routes,
                Route,
                Link
                } from "react-router-dom";

                function App() {
                return (
                    <BrowserRouter>
                    <Routes>
                        <Route path="/" element={<Home />} />
                        <Route path="users/*" element={<Users />} />
                    </Routes>
                    </BrowserRouter>
                );
                }

                function Users() {
                return (
                    <div>
                    <nav>
                        <Link to="me">My Profile</Link>
                    </nav>

                    <Routes>
                        <Route path=":id" element={<UserProfile />} />
                        <Route path="me" element={<OwnUserProfile />} />
                    </Routes>
                    </div>
                );
                }

        NOTE: A few important things to notice about v6 in this example:

            - <Route path> and <Link to> are relative. This means that they 
            automatically build on the parent route's path and URL so you don't have 
            to manually interpolate match.url or match.path

            - <Route exact> is gone. Instead, routes with descendant routes (defined 
            in other components) use a trailing * in their path to indicate they match 
            deeply

            - You may put your routes in whatever order you wish and the router will 
            automatically detect the best route for the current URL. This prevents bugs 
            due to manually putting routes in the wrong order in a <Switch>

            - You may have also noticed that all <Route children> from the v5 app changed 
            to <Route element> in v6. Assuming you followed the upgrade steps to v5.1, 
            this should be as simple as moving your route element from the child position 
            to a named element prop.


    ** Advantages of <Route element>
        - For starters, we see React itself taking the lead here with the <Suspense 
        fallback={<Spinner />}> API. The fallback prop takes a React element, not a 
        component. This lets you easily pass whatever props you want to your <Spinner> 
        from the component that renders it.

        - Using elements instead of components means we don't have to provide a 
        passProps-style API so you can get the props you need to your elements. 
        For example, in a component-based API there is no good way to pass props to 
        the <Profile> element that is rendered when <Route path=":userId" component={Profile} /> 
        matches. Most React libraries who take this approach end up with either an API like 
        <Route component={Profile} passProps={{ animate: true }} /> or use a render 
        prop or higher-order component.

        - Also, in case you didn't notice, in v4 and v5 Route's rendering API became 
        rather large. It went something like this:

                // Ah, this is nice and simple!
                <Route path=":userId" component={Profile} />

                // But wait, how do I pass custom props to the <Profile> element??
                // Hmm, maybe we can use a render prop in those situations?
                <Route
                path=":userId"
                render={routeProps => (
                    <Profile routeProps={routeProps} animate={true} />
                )}
                />

                // Ok, now we have two ways to render something with a route. :/

                // But wait, what if we want to render something when a route
                // *doesn't* match the URL, like a Not Found page? Maybe we
                // can use another render prop with slightly different semantics?
                <Route
                path=":userId"
                children={({ match }) => (
                    match ? (
                    <Profile match={match} animate={true} />
                    ) : (
                    <NotFound />
                    )
                )}
                />

                // What if I want to get access to the route match, or I need
                // to redirect deeper in the tree?
                function DeepComponent(routeStuff) {
                // got routeStuff, phew!
                }
                export default withRouter(DeepComponent);

                // Well hey, now at least we've covered all our use cases!
                // ... *facepalm*

        At least part of the reason for this API sprawl was that React did not provide 
        any way for us to get the information from the <Route> to your route element, 
        so we had to invent clever ways to get both the route data and your own custom 
        props through to your elements: component, render props, passProps 
        higher-order-components ... until hooks came along!

        Now, the conversation above goes like this:

            // Ah, nice and simple API. And it's just like the <Suspense> API!
            // Nothing more to learn here.
            <Route path=":userId" element={<Profile />} />

            // But wait, how do I pass custom props to the <Profile>
            // element? Oh ya, it's just an element. Easy.
            <Route path=":userId" element={<Profile animate={true} />} />

            // Ok, but how do I access the router's data, like the URL params
            // or the current location?
            function Profile({ animate }) {
            let params = useParams();
            let location = useLocation();
            }

            // But what about components deep in the tree?
            function DeepComponent() {
            // oh right, same as anywhere else
            let navigate = useNavigate();
            }

            // Aaaaaaaaand we're done here.


        Another important reason for using the element prop in v6 is that <Route children> 
        is reserved for nesting routes. This is one of people's favorite features from v3 
        and @reach/router, and we're bringing it back in v6. Taking the code in the previous 
        example one step further, we can hoist all <Route> elements into a single route config:

                // This is a React Router v6 app
                import {
                BrowserRouter,
                Routes,
                Route,
                Link,
                Outlet
                } from "react-router-dom";

                function App() {
                return (
                    <BrowserRouter>
                    <Routes>
                        <Route path="/" element={<Home />} />
                        <Route path="users" element={<Users />}>
                        <Route path="me" element={<OwnUserProfile />} />
                        <Route path=":id" element={<UserProfile />} />
                        </Route>
                    </Routes>
                    </BrowserRouter>
                );
                }

                function Users() {
                return (
                    <div>
                    <nav>
                        <Link to="me">My Profile</Link>
                    </nav>

                    <Outlet />
                    </div>
                );
                }

        This step is optional of course, but it's really nice for small to medium 
        sized apps that don't have thousands of routes.

        Notice how <Route> elements nest naturally inside a <Routes> element. Nested routes 
        build their path by adding to the parent route's path. We didn't need a trailing * 
        on <Route path="users"> this time because when the routes are defined in one spot 
        the router is able to see all your nested routes.

        You'll only need the trailing * when there is another <Routes> somewhere in that 
        route's descendant tree. In that case, the descendant <Routes> will match on the 
        portion of the pathname that remains (see the previous example for what this looks 
        like in practice).

        When using a nested config, routes with children should render an <Outlet> in 
        order to render their child routes. This makes it easy to render layouts with 
        nested UI.

    
    ** Note on <Route path> patterns
        - React Router v6 uses a simplified path format. <Route path> in v6 supports only 
        2 kinds of placeholders: dynamic :id-style params and * wildcards. A * wildcard 
        may be used only at the end of a path, not in the middle.

        All of the following are valid route paths in v6:

            /groups
            /groups/admin
            /users/:id
            /users/:id/messages
            /files/*
            /files/:id/*

        The following RegExp-style route paths are not valid in v6:

            /users/:id?
            /tweets/:id(\d+)
            /files/*/cat.jpg
            /files-*

        We added the dependency on path-to-regexp in v4 to enable more advanced pattern 
        matching. In v6 we are using a simpler syntax that allows us to predictably parse 
        the path for ranking purposes. It also means we can stop depending on path-to-regexp, 
        which is nice for bundle size.

        If you were using any of path-to-regexp's more advanced syntax, you'll have to remove 
        it and simplify your route paths. If you were using the RegExp syntax to do URL param 
        validation (e.g. to ensure an id is all numeric characters) please know that we plan 
        to add some more advanced param validation in v6 at some point. For now, you'll need 
        to move that logic to the component the route renders, and let it branch it's rendered 
        tree after you parse the params.

        If you were using <Route sensitive> you should move it to its containing 
        <Routes caseSensitive> prop. Either all routes in a <Routes> element are 
        case-sensitive or they are not.

        One other thing to notice is that all path matching in v6 ignores the trailing 
        slash on the URL. In fact, <Route strict> has been removed and has no effect in 
        v6. This does not mean that you can't use trailing slashes if you need to. Your 
        app can decide to use trailing slashes or not, you just can't render two different
        UIs client-side at <Route path="edit"> and <Route path="edit/">. You can still render 
        two different UIs at those URLs (though we wouldn't recommend it), but you'll 
        have to do it server-side.


    ** Note on <Link to> values
        In v5, a <Link to> value that does not begin with / was ambiguous; it depends on 
        what the current URL is. For example, if the current URL is /users, a v5 <Link to="me"> 
        would render a <a href="/me">. However, if the current URL has a trailing slash, 
        like /users/, the same <Link to="me"> would render <a href="/users/me">. This makes 
        it difficult to predict how links will behave, so in v5 we recommended that you 
        build links from the root URL (using match.url) and not use relative <Link to> values.

        React Router v6 fixes this ambiguity. In v6, a <Link to="me"> will always render the 
        same <a href>, regardless of the current URL.

        For example, a <Link to="me"> that is rendered inside a <Route path="users"> will 
        always render a link to /users/me, regardless of whether or not the current URL 
        has a trailing slash.

        When you'd like to link back "up" to parent routes, use a leading .. segment in 
        your <Link to> value, similar to what you'd do in a <a href>.

                function App() {
                    return (
                        <Routes>
                        <Route path="users" element={<Users />}>
                            <Route path=":id" element={<UserProfile />} />
                        </Route>
                        </Routes>
                    );
                    }

                    function Users() {
                    return (
                        <div>
                        <h2>
                            {/* This links to /users - the current route */}
                            <Link to=".">Users</Link>
                        </h2>

                        <ul>
                            {users.map(user => (
                            <li>
                                {/* This links to /users/:id - the child route */}
                                <Link to={user.id}>{user.name}</Link>
                            </li>
                            ))}
                        </ul>
                        </div>
                    );
                    }

                    function UserProfile() {
                    return (
                        <div>
                        <h2>
                            {/* This links to /users - the parent route */}
                            <Link to="..">All Users</Link>
                        </h2>

                        <h2>
                            {/* This links to /users/:id - the current route */}
                            <Link to=".">User Profile</Link>
                        </h2>

                        <h2>
                            {/* This links to /users/mj - a "sibling" route */}
                            <Link to="../mj">MJ</Link>
                        </h2>
                        </div>
                    );
                    }

        It may help to think about the current URL as if it were a directory path on 
        the filesystem and <Link to> like the cd command line utility.
    
    // If your routes look like this
            <Route path="app">
            <Route path="dashboard">
                <Route path="stats" />
            </Route>
            </Route>

            // and the current URL is /app/dashboard (with or without
            // a trailing slash)
            <Link to="stats">               => <a href="/app/dashboard/stats">
            <Link to="../stats">            => <a href="/app/stats">
            <Link to="../../stats">         => <a href="/stats">
            <Link to="../../../stats">      => <a href="/stats">

            // On the command line, if the current directory is /app/dashboard
            cd stats                        # pwd is /app/dashboard/stats
            cd ../stats                     # pwd is /app/stats
            cd ../../stats                  # pwd is /stats
            cd ../../../stats               # pwd is /stats


        Note: The decision to ignore trailing slashes while matching and creating 
        relative paths was not taken lightly by our team. We consulted with a number 
        of our friends and clients (who are also our friends!) about it. We found that 
        most of us don't even understand how plain HTML relative links are handled with 
        the trailing slash. Most people guessed it worked like cd on the command line 
        (it does not). Also, HTML relative links don't have the concept of nested routes, 
        they only worked on the URL, so we had to blaze our own trail here a bit. 
        @reach/router set this precedent and it has worked out well for a couple of years.

        In addition to ignoring trailing slashes in the current URL, it is important 
        to note that <Link to=".."> will not always behave like <a href=".."> when your 
        <Route path> matches more than one segment of the URL. Instead of removing just 
        one segment of the URL, it will resolve based upon the parent route's path, 
        essentially removing all path segments specified by that route.

                function App() {
                return (
                    <Routes>
                    <Route path="users">
                        <Route
                        path=":id/messages"
                        element={
                            // This links to /users
                            <Link to=".." />
                        }
                        />
                    </Route>
                    </Routes>
                );
                }

        This may seem like an odd choice, to make .. operate on routes instead of URL 
        segments, but it's a huge help when working with * routes where an indeterminate 
        number of segments may be matched by the *. In these scenarios, a single .. 
        segment in your <Link to> value can essentially remove anything matched by the *, 
        which lets you create more predictable links in * routes.

                function App() {
                return (
                    <Routes>
                    <Route path=":userId">
                        <Route path="messages" element={<UserMessages />} />
                        <Route
                        path="files/*"
                        element={
                            // This links to /:userId/messages, no matter
                            // how many segments were matched by the *
                            <Link to="../messages" />
                        }
                        />
                    </Route>
                    </Routes>
                );
                }